{"version":3,"file":"static/js/317.9e66e802.chunk.js","mappings":"uNA+CA,UAvCmB,WACjB,OAAwCA,EAAAA,EAAAA,YAAU,eAA3CC,EAAY,KAAEC,EAAe,KACpC,GAAsDC,EAAAA,EAAAA,KAA9CC,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WAEjCC,GAASC,EAAAA,EAAAA,MAAYD,QAE3BE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,yCAAG,kHAEWL,EAAY,GAAD,OACjCM,uDAAiC,wBAAgBJ,IACpD,KAAD,EAFKK,EAAY,OAGlBX,EAAgBW,EAAaC,QAAQ,uGAExC,kBAPgB,mCAQjBH,GACF,GAAG,CAACL,EAAaE,IAQjB,OACE,UAAC,WAAc,YACb,SAAC,IAAU,CAACH,MAAOA,EAAOU,QAASR,IAClCH,IACC,gBAAKY,UAAU,SAAQ,UACrB,SAAC,IAAc,OAGjBZ,GAAaH,IACb,SAAC,IAAS,CAACgB,MAAOhB,EAAciB,cAfV,SAACC,GAC3BjB,GAAgB,SAACkB,GAAU,OACzBA,EAAWC,QAAO,SAACC,GAAK,OAAKA,EAAMC,KAAOJ,CAAc,GAAC,GAE7D,MAeF,C","sources":["places/pages/UserPlaces.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport PlaceList from \"../components/PlaceList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nconst UserPlaces = () => {\n  const [loadedPlaces, setLoadedPlaces] = useState();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const userId = useParams().userId;\n\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\n        );\n        setLoadedPlaces(responseData.places);\n      } catch (err) {}\n    };\n    fetchPlaces();\n  }, [sendRequest, userId]);\n\n  const placeDeletedHandler = (deletedPlaceId) => {\n    setLoadedPlaces((prevPlaces) =>\n      prevPlaces.filter((place) => place.id !== deletedPlaceId)\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && (\n        <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UserPlaces;\n"],"names":["useState","loadedPlaces","setLoadedPlaces","useHttpClient","isLoading","error","sendRequest","clearError","userId","useParams","useEffect","fetchPlaces","process","responseData","places","onClear","className","items","onDeletePlace","deletedPlaceId","prevPlaces","filter","place","id"],"sourceRoot":""}